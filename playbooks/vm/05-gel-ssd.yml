
- name: Instal GEL
  hosts:
    - write
    - backend
    - read
    - infrastructure
  tasks:
    - name: install GEL license
      copy:
        src: templates/sensitive/gel-license.jwt
        dest: /etc/enterprise-logs/license.jwt

    - name: configure GEL config.yaml
      copy:
        src: templates/gel-config.yml
        dest: /etc/enterprise-logs/config.yaml

    - name: configure GEL runtime-config.yaml
      copy:
        src: templates/runtime-config.yaml
        dest: /etc/enterprise-logs/runtime-config/runtime-config.yaml


- name: Instal GEL write path
  hosts:
    - write
  tasks:
    - name: create the enterprise-logs service file
      copy:
        src: templates/enterprise-logs-write.service
        dest: /etc/systemd/system/enterprise-logs-write.service
    - name: reload systemd
      systemd:
        daemon_reload: yes
    - name: restart enterprise-logs-write
      systemd:
        name: enterprise-logs-write
        enabled: true
        state: started

- name: Instal GEL backend
  hosts:
    - backend
  tasks:
    - name: create the enterprise-logs service file
      copy:
        src: templates/enterprise-logs-backend.service
        dest: /etc/systemd/system/enterprise-logs-backend.service
    - name: reload systemd
      systemd:
        daemon_reload: yes
    - name: restart enterprise-logs-backend
      systemd:
        name: enterprise-logs-backend
        enabled: true
        state: started

- name: Instal GEL read
  hosts:
    - read
  tasks:
    - name: create the enterprise-logs service file
      copy:
        src: templates/enterprise-logs-read.service
        dest: /etc/systemd/system/enterprise-logs-read.service
    - name: reload systemd
      systemd:
        daemon_reload: yes
    - name: restart enterprise-logs-read
      systemd:
        name: enterprise-logs-read
        enabled: true
        state: started

- name: Instal GEL gateway
  hosts:
    - infrastructure
  tasks:
    - name: create the enterprise-logs service file
      copy:
        src: templates/enterprise-logs-gateway.service
        dest: /etc/systemd/system/enterprise-logs-gateway.service
    - name: reload systemd
      systemd:
        daemon_reload: yes
    - name: restart enterprise-logs-gateway
      systemd:
        name: enterprise-logs-gateway
        enabled: true
        state: started

- name: Check readiness
  hosts:
    - write
    - backend
    - read
    - infrastructure
  tasks:
    - name: Check if server is up 
      uri:
        url: "http://{{inventory_hostname}}:3100/ready"
        method: GET
        status_code: 200
      register: result
      until: result.status == 200
      retries: 100
      delay: 2

- name: Gnerate tokens
  hosts:
    - infra
  tasks:
    - name: check if GEL is present
      stat:
        path: /root/gel-admin-token.txt
      register: stat_token
    - name: run the tokengen job
      command: /usr/local/bin/enterprise-logs --config.file=/etc/enterprise-logs/config.yaml --target=tokengen --tokengen.token-file=/root/gel-admin-token.txt
      args:
        creates: /root/gel-admin-token.txt
      when: not stat_token.stat.exists

    - name: "Read token"
      shell: |
        cat /root/gel-admin-token.txt
      register: token

    - name: Create tenant
      uri: 
        url: "http://{{inventory_hostname}}:3100/admin/api/v3/tenants"
        user: "admin"
        password: "{{ token.stdout }}"
        method: POST
        body_format: json
        body: | 
          {
              "name":"{{ item }}",
              "display_name": "{{ item }}",
              "cluster": "enterprise-logs"
          }
        force_basic_auth: yes
        status_code: 
          - 200
          - 409
      loop:
        - dev
        - prod

    - name: Create tenant admin accesspolicies
      uri: 
        url: "http://{{inventory_hostname}}:3100/admin/api/v3/accesspolicies"
        user: "admin"
        password: "{{ token.stdout }}"
        method: POST
        body_format: json
        body: | 
          {
              "name":"{{ item }}_admin",
              "display_name":"{{ item }}_admin",
              "realms":[
                  {
                      "tenant":"{{ item }}",
                      "cluster":"enterprise-logs"
                  }
              ],
              "scopes":[
                  "admin",
                  "alerts:read",
                  "alerts:write",
                  "logs:delete",
                  "logs:write",
                  "logs:read",
                  "rules:read",
                  "rules:write"
              ]
          }
        force_basic_auth: yes
        status_code:
          - 200
          - 409
      loop:
        - dev
        - prod

    - name: Create tenant admin accesspolicies
      uri: 
        url: "http://{{inventory_hostname}}:3100/admin/api/v3/accesspolicies"
        user: "admin"
        password: "{{ token.stdout }}"
        method: POST
        body_format: json
        body: | 
          {
              "name":"{{ item }}_admin",
              "display_name":"{{ item }}_admin",
              "realms":[
                  {
                      "tenant":"{{ item }}",
                      "cluster":"enterprise-logs"
                  }
              ],
              "scopes":[
                  "admin",
                  "alerts:read",
                  "alerts:write",
                  "logs:delete",
                  "logs:write",
                  "logs:read",
                  "rules:read",
                  "rules:write"
              ]
          }
        force_basic_auth: yes
        status_code:
          - 200
          - 409
      loop:
        - dev
        - prod

    - name: Create label based tenant accesspolicies
      uri: 
        url: "http://{{inventory_hostname}}:3100/admin/api/v3/accesspolicies"
        user: "admin"
        password: "{{ token.stdout }}"
        method: POST
        body_format: json
        body: | 
          {
              "name":"{{ item }}_team_a",
              "display_name":"{{ item }}_team_a",
              "realms":[
                  {
                      "tenant":"{{ item }}",
                      "cluster":"enterprise-logs",
                      "label_policies":[
                          {
                              "selector":"{tenant=\"appa\"}"
                          }
                      ]
                  }
              ],
              "scopes":[
                  "alerts:read",
                  "alerts:write",
                  "logs:read",
                  "rules:read",
                  "rules:write"
              ]
          }
        force_basic_auth: yes
        status_code:
          - 200
          - 409
      loop:
        - dev
        - prod

    - name: Create tokens
      uri: 
        url: "http://{{inventory_hostname}}:3100/admin/api/v3/tokens"
        user: "admin"
        password: "{{ token.stdout }}"
        method: POST
        body_format: json
        body: | 
          {
              "name":"{{ item }}_token01", 
              "display_name":"{{ item }}_token01",
              "access_policy": "{{ item }}"
          }
        force_basic_auth: yes
        status_code:
          - 200
          - 409
      loop:
        - dev_admin
        - dev_team_a
        - prod_admin
        - prod_team_a
      register: usertokens

    - name: copy tokens
      copy:
        dest: "/root/{{ item.item }}.token"
        content: "{{ item.json.token }}"
      loop: "{{ usertokens.results }}"
      when: item.status == 200