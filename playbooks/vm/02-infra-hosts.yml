---
# this is to simulate all the dependencies that LOKI could have
- name: Prepare Hosts
  hosts:
    - infrastructure
  vars:
    minio_buckets:
      - /data/enterprise-logs-chunks
      - /data/enterprise-logs-admin
      - /data/enterprise-logs-ruler
    memcacheds:
      - name: chunk-cache
        port: 11211
      - name: write-cache
        port: 11212
      - name: results-cache
        port: 11213
      - name: index-cache
        port: 11214
  vars_files:
  tasks:
    - name: Base server packages
      become: true
      apt:
        name: 
          - docker.io
          - python3-docker
        state: present

    - name: adding existing user '{{ ansible_user }}' to group docker
      user:
        name: '{{ ansible_user }}'
        groups: docker
        append: yes



    ####################
    # Minio deployment
    ####################

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: /minio/
        state: directory
        mode: '0755'
        owner: 102
        group: 102

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: /minio/data
        state: directory
        mode: '0755'
        owner: 102
        group: 102

    - name: "Manage minio container"
      docker_container:
        name: "minio"
        hostname: "minio"
        image: "minio/minio:RELEASE.2023-04-13T03-08-07Z"
        state: "started"
        recreate: "true"
        restart_policy: unless-stopped
        container_default_behavior: no_defaults
        detach: true
        user: "102:102"
        ports: 
          - 9000:9000
          - 9001:9001
        command: "sh -c 'mkdir -p {{ minio_buckets | join(' ') }} && minio server /data --console-address :9001'"
        env:
          MINIO_ROOT_USER: admin
          MINIO_ROOT_PASSWORD: password
        entrypoint: [""]
        labels: |
          {
            "app": "minio",
          }
        volumes:
          - "/minio/data:/data:rw"



    ####################
    # Memcached deployment
    ####################

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: /memcached/{{item.name}}/tmp
        state: directory
        mode: '0755'
        owner: 1001
        group: 1001
      loop: "{{ memcacheds }}"

    - name: "Manage memcached container"
      loop: "{{ memcacheds }}"
      docker_container:
        name: "{{ item.name }}"
        hostname: "{{ item.name }}"
        image: "docker.io/bitnami/memcached:1.6.19-debian-11-r7"
        state: "started"
        recreate: "true"
        restart_policy: unless-stopped
        container_default_behavior: no_defaults
        detach: true
        user: "1001:1001"
        ports: 
          - "{{ item.port }}:11211"
        command:
        env:
          BITNAMI_DEBUG: "false"
          MEMCACHED_PORT_NUMBER: "11211"
          MEMCACHED_THREADS: "4"
          MEMCACHED_CACHE_SIZE: "64"
          MEMCACHED_MAX_CONNECTIONS: "1024"
          MEMCACHED_MAX_ITEM_SIZE: "5242880"
        entrypoint: 
        labels: |
          {
            "app": "{{ item.name }}",
          }
        volumes:
          - "/memcached/{{ item.name }}/tmp:/tmp:rw"

    ####################
    # Prometheus
    ####################

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: /prom/{{item}}
        state: directory
        mode: '0755'
        owner: 1002
        group: 1002
      loop:
        - data
        - config

    - name: Copy config
      copy:
        src: "templates/prometheus.yml"
        dest: /prom/config/prometheus.yml
        owner: 1002
        group: 1002      

    - name: "Manage prom container"
      docker_container:
        name: "prometheus"
        hostname: "prometheus"
        image: "docker.io/prom/prometheus:v2.43.0"
        state: "started"
        recreate: "true"
        restart_policy: unless-stopped
        container_default_behavior: no_defaults
        detach: true
        user: "1002:1002"
        ports: 
          - "9090:9090"
        command:
          - --config.file=/etc/prometheus/prometheus.yml
          - --storage.tsdb.path=/prometheus
          - --web.console.libraries=/usr/share/prometheus/console_libraries
          - --web.console.templates=/usr/share/prometheus/consoles
          - --web.enable-remote-write-receiver
        env:
        entrypoint: 
        labels: |
          {
            "app": "prometheus",
          }
        volumes:
          - /prom/data:/prometheus:rw
          - /prom/config/prometheus.yml:/etc/prometheus/prometheus.yml:ro


    ####################
    # AlertManager
    ####################

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: /alertmanager/{{item}}
        state: directory
        mode: '0755'
        owner: 1003
        group: 1003
      loop:
        - data
        - config
        - config/plugins

    - name: Copy config
      copy:
        src: "templates/alertmanager.yml"
        dest: /alertmanager/config/alertmanager.yml
        owner: 1003
        group: 1003

    - name: "Manage alertmanager container"
      docker_container:
        name: "alertmanager"
        hostname: "alertmanager"
        image: "docker.io/prom/alertmanager:v0.25.0"
        state: "started"
        recreate: "true"
        restart_policy: unless-stopped
        container_default_behavior: no_defaults
        detach: true
        user: "1003:1003"
        ports: 
          - "9093:9093"
        command:
        env:
        entrypoint: 
        labels: |
          {
            "app": "alertmanager",
          }
        volumes:
          - /alertmanager/data:/alertmanager:rw
          - /alertmanager/config/alertmanager.yml:/etc/prometheus/alermanager.yml:ro


          
    ####################
    # Grafana Enterprise
    ####################

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: /ge/{{item}}
        state: directory
        mode: '0755'
        owner: 1004
        group: 1004
      loop:
        - data
        - config
        - config/plugins

    - name: install GEL license
      copy:
        src: templates/sensitive/ge-license.jwt
        dest: /ge/config/license.jwt

    - name: "Manage ge container"
      docker_container:
        name: "ge"
        hostname: "ge"
        image: "docker.io/grafana/grafana-enterprise:9.4.7" 
        state: "started"
        recreate: "true"
        restart_policy: unless-stopped
        container_default_behavior: no_defaults
        detach: true
        user: "1004:1004"
        ports: 
          - "3000:3000"
        command:
        env:
          GF_SERVER_DOMAIN: infra
          GF_SERVER_ROOT_URL: http://infra:3000/
          GF_ENTERPRISE_LICENSE_PATH: /config/license.jwt
          GF_PATHS_DATA: "/data"
          GF_PATHS_LOGS: "/data/logs"
          GF_PATHS_PLUGINS: "/plugins"
        entrypoint: 
        labels: |
          {
            "app": "alertmanager",
          }
        volumes:
          - /ge/data/:/data:rw
          - /ge/config/plugins:/plugins:rw
          - /ge/config/license.jwt:/config/license.jwt:ro


    - name: Check if server is up
      uri:
        url: "http://infra:3000/api/health"
        method: GET
        status_code: 200
      register: result
      until: result.status == 200
      retries: 60
      delay: 2

    - name: Reset password
      ignore_errors: true
      uri:
        url: "http://infra:3000/api/user/password"
        user: "admin"
        password: "admin"
        method: PUT
        body: |
          {
            "oldPassword": "admin",
            "newPassword": "password"
          }
        force_basic_auth: yes
        status_code: 200
        headers:
          Content-Type: application/json
          accept: application/json