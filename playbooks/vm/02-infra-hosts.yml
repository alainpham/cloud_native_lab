---
# this is to simulate all the dependencies that LOKI could have
- name: Prepare Hosts
  hosts:
    - infrastructure
  vars:
    minio_buckets:
      - /data/enterprise-logs-chunks
      - /data/enterprise-logs-admin
      - /data/enterprise-logs-ruler
      - /data/mimir-admin
      - /data/mimir-tsdb
      - /data/mimir-ruler
      - /data/mimir-alertmanager
    memcacheds:
      - name: chunk-cache
        port: 11211
      - name: write-cache
        port: 11212
      - name: results-cache
        port: 11213
      - name: index-cache
        port: 11214
    localregistry: registry.work.lan
    images:
      # minio: minio/minio:RELEASE.2023-05-04T21-44-30Z
      # memcached: bitnami/memcached:1.6.20-debian-11-r0
      # prometheus: prom/prometheus:v2.43.1
      # alertmanager: "prom/alertmanager:v0.25.0"
      # mimir: "grafana/mimir:2.8.0"
      minio: "{{ localregistry }}/minio:RELEASE.2023-05-04T21-44-30Z"
      memcached: "{{ localregistry }}/memcached:1.6.20-debian-11-r0"
      prometheus: "{{ localregistry }}/prometheus:v2.43.1"
      alertmanager: "{{ localregistry }}/alertmanager:v0.25.0"
      mimir: "{{ localregistry }}/mimir:2.8.0"

  vars_files:
  tasks:
    - name: Base server packages
      apt:
        name: 
          - docker.io
          - python3-docker
          - unzip
        state: present

    - name: Docker insecure registry
      copy:
        dest: "/etc/docker/daemon.json"
        content: |
          {
              "insecure-registries" : ["{{ localregistry }}"]
          }
      register: dockerconfig

    - name: Restart docker
      ansible.builtin.systemd:
        name: docker
        state: restarted
      when: dockerconfig.changed

    - name: adding existing user '{{ ansible_user }}' to group docker
      user:
        name: '{{ ansible_user }}'
        groups: docker
        append: yes



    ####################
    # Minio deployment
    ####################

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: /minio/
        state: directory
        mode: '0755'
        owner: 102
        group: 102

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: /minio/data
        state: directory
        mode: '0755'
        owner: 102
        group: 102

    - name: "Manage minio container"
      docker_container:
        name: "minio"
        hostname: "minio"
        image: "{{ images['minio'] }}"
        state: "started"
        recreate: "true"
        restart_policy: unless-stopped
        container_default_behavior: no_defaults
        detach: true
        user: "102:102"
        ports: 
          - 9000:9000
          - 9001:9001
        command: 
         - "sh -c 'mkdir -p {{ minio_buckets | join(' ') }} && minio server /data --console-address :9001'"
        env:
          MINIO_ROOT_USER: admin
          MINIO_ROOT_PASSWORD: password
        entrypoint: [""]
        labels: |
          {
            "app": "minio",
          }
        volumes:
          - "/minio/data:/data:rw"



    ####################
    # Memcached deployment
    ####################

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: /memcached/{{item.name}}/tmp
        state: directory
        mode: '0755'
        owner: 1001
        group: 1001
      loop: "{{ memcacheds }}"

    - name: "Manage memcached container"
      loop: "{{ memcacheds }}"
      docker_container:
        name: "{{ item.name }}"
        hostname: "{{ item.name }}"
        image: "{{ images['memcached'] }}"
        state: "started"
        recreate: "true"
        restart_policy: unless-stopped
        container_default_behavior: no_defaults
        detach: true
        user: "1001:1001"
        ports: 
          - "{{ item.port }}:11211"
        command:
        env:
          BITNAMI_DEBUG: "false"
          MEMCACHED_PORT_NUMBER: "11211"
          MEMCACHED_THREADS: "4"
          MEMCACHED_CACHE_SIZE: "64"
          MEMCACHED_MAX_CONNECTIONS: "1024"
          MEMCACHED_MAX_ITEM_SIZE: "5242880"
        entrypoint: 
        labels: |
          {
            "app": "{{ item.name }}",
          }
        volumes:
          - "/memcached/{{ item.name }}/tmp:/tmp:rw"

    ####################
    # Prometheus
    ####################

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: /prom/{{item}}
        state: directory
        mode: '0755'
        owner: 1002
        group: 1002
      loop:
        - data
        - config

    - name: Copy config
      copy:
        src: "templates/prometheus.yml"
        dest: /prom/config/prometheus.yml
        owner: 1002
        group: 1002      

    - name: "Manage prom container"
      docker_container:
        name: "prometheus"
        hostname: "prometheus"
        image: "{{ images['prometheus'] }}"
        state: "started"
        recreate: "true"
        restart_policy: unless-stopped
        container_default_behavior: no_defaults
        detach: true
        user: "1002:1002"
        ports: 
          - "9190:9090"
        command:
          - --config.file=/etc/prometheus/prometheus.yml
          - --storage.tsdb.path=/prometheus
          - --web.console.libraries=/usr/share/prometheus/console_libraries
          - --web.console.templates=/usr/share/prometheus/consoles
          - --web.enable-remote-write-receiver
        env:
        entrypoint: 
        labels: |
          {
            "app": "prometheus",
          }
        volumes:
          - /prom/data:/prometheus:rw
          - /prom/config/prometheus.yml:/etc/prometheus/prometheus.yml:ro


    ####################
    # AlertManager
    ####################

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: /alertmanager/{{item}}
        state: directory
        mode: '0755'
        owner: 1003
        group: 1003
      loop:
        - data
        - config
        - config/plugins

    - name: Copy config
      copy:
        src: "templates/alertmanager.yml"
        dest: /alertmanager/config/alertmanager.yml
        owner: 1003
        group: 1003

    - name: "Manage alertmanager container"
      docker_container:
        name: "alertmanager"
        hostname: "alertmanager"
        image: "{{ images['alertmanager'] }}"
        state: "started"
        recreate: "true"
        restart_policy: unless-stopped
        container_default_behavior: no_defaults
        detach: true
        user: "1003:1003"
        ports: 
          - "9093:9093"
        command:
        env:
        entrypoint: 
        labels: |
          {
            "app": "alertmanager",
          }
        volumes:
          - /alertmanager/data:/alertmanager:rw
          - /alertmanager/config/alertmanager.yml:/etc/prometheus/alermanager.yml:ro


          
    ####################
    # Mimir OSS
    ####################

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: /mimir/{{item}}
        state: directory
        mode: '0755'
        owner: 1010
        group: 1010
      loop:
        - data
        - config

    - name: Mimir config
      copy:
        dest: "/mimir/config/config.yml"
        content: |
          multitenancy_enabled: false

          ingester:
            ring:
              replication_factor: 1

          blocks_storage:
            backend: s3
            s3:
              endpoint: infra:9000
              bucket_name: mimir-tsdb
              access_key_id: admin
              secret_access_key: password
              insecure: true
            tsdb:
              dir: /data/tsdb/
            bucket_store:
              sync_dir: /data/tsdb-sync/

          memberlist:
            join_members: [ mimir ]

          activity_tracker:
            filepath: /data/metrics-activity.log

          ruler: 
            rule_path: /data/data-ruler/

          ruler_storage:
            backend: s3
            s3:
              endpoint: infra:9000
              bucket_name: mimir-ruler
              access_key_id: admin
              secret_access_key: password
              insecure: true
          alertmanager:
            data_dir: /data/alertmanager
            enable_api: true
            external_url: /alertmanager
            fallback_config_file: /config/alertmanager_fallback_config.yaml
          alertmanager_storage:
            backend: s3
            s3:
              endpoint: infra:9000
              bucket_name: mimir-alertmanager
              access_key_id: admin
              secret_access_key: password
              insecure: true

          compactor:
            data_dir: /data/data-compactor/

          server:
            log_level: info
            http_listen_port: 9090


    - name: Mimir config
      copy:
        dest: "/mimir/config/alertmanager_fallback_config.yaml"
        content: |
          receivers:
              - name: default-receiver
          route:
              receiver: default-receiver

    - name: "Manage mimir container"
      docker_container:
        name: "mimir"
        hostname: "mimir"
        image: "{{ images['mimir'] }}"
        state: "started"
        recreate: "true"
        restart_policy: unless-stopped
        container_default_behavior: no_defaults
        detach: true
        user: "1010:1010"
        ports: 
          - "9090:9090"
        command: "-config.file=/config/config.yml"
        env:
        entrypoint: 
        labels: |
          {
            "app": "mimir",
          }
        volumes:
          - /mimir/data:/data:rw
          - /mimir/config/:/config:ro

    - name: Check mimir is up
      uri:
        url: "http://infra:9090/ready"
        method: GET
        status_code: 200
      register: result
      until: result.status == 200
      retries: 60
      delay: 2