apiVersion: batch/v1
kind: Job
metadata:
  name: mimir-tokengen
  namespace: ${namespace}
  labels:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: tokengen
spec:
  backoffLimit: 6
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: tokengen
    spec:
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      initContainers:
        - name: mimir
          image: ${localregistry}/${mimir}
          imagePullPolicy: IfNotPresent
          args:
            # The shared emptyDir exists only while the job is running, and is deleted once the job is completed.
            # The tokengen generates a new admin token in case the 'token-file' file doesn't exist.
            # As a result, subsequent executions of this tokengen job will generate new admin tokens.
            # Note that previously generated tokens remain valid, as these remain present in the object storage.
            - "-target=tokengen"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
            - "-tokengen.token-file=/shared/admin-token"
          volumeMounts:
            - name: license
              mountPath: /license
            - name: config
              mountPath: /etc/mimir
            - name: shared
              mountPath: /shared
            - name: runtime-config
              mountPath: /var/mimir
            - name: alertmanager-fallback-config
              mountPath: /configs/
          env:
      containers:
        - name: create-secret
          image: ${localregistry}/${kubectl}
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -euc
            - |
              # Create or update admin token secrets generated by tokengen job
              kubectl create secret generic "mimir-admin-token" \
                --from-file=token=/shared/admin-token \
                --dry-run=client -o yaml \
                | kubectl apply -n ${namespace} -f -
          volumeMounts:
            - name: shared
              mountPath: /shared
            - name: config
              mountPath: /etc/mimir
            - name: license
              mountPath: /license
      restartPolicy: OnFailure
      serviceAccount: kubectlsa
      serviceAccountName: kubectlsa
      volumes:
        - name: license
          configMap:
            name: gem-license
        - name: config
          configMap:
            name: mimir-config
        - name: runtime-config
          configMap:
            name: mimir-runtime
        - name: alertmanager-fallback-config
          configMap:
            name: mimir-alertmanager-fallback-config
        - name: shared
          emptyDir: {}
