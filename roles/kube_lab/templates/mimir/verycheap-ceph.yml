# These values configure the Grafana Mimir or Grafana Enterprise Metrics cluster to
# handle production ingestion of ~1M active series using the blocks
# storage engine scraped with a 15s interval.
# Query requirements can vary dramatically depending on query rate and query
# ranges. The values here satisfy a "usual" query load as seen from our
# production clusters at this scale.
# It is important to ensure that you run no more than one ingester replica
# per node so that a single node failure does not cause data loss. Zone aware
# replication can be configured to ensure data replication spans availability
# zones. Refer to [Zone Aware Replication](https://grafana.com/docs/mimir/v2.0.x/operators-guide/configuring/configuring-zone-aware-replication/)
# for more information.
# Minio is no longer enabled and you are encouraged to use your cloud providers
# object storage service for production deployments.
# Ingesters are configured with a replication factor of 3 to ensure that a single ingester failur does not
# result in data loss.

image:
  repository: registry.work.lan/mimir
  tag: 2.2.0
  pullPolicy: IfNotPresent

alertmanager:
  persistentVolume:
    enabled: true
    size: 1Gi
  replicas: 3
  resources:
    limits:
      cpu: 300m
      memory: 128Mi
    requests:
      cpu: 300m
      memory: 128Mi
  statefulSet:
    enabled: true
  env:
    - name: RULER_BUCKET_HOST
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-ruler
          key: BUCKET_HOST
    - name: RULER_BUCKET_NAME
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-ruler
          key: BUCKET_NAME
    - name: RULER_AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: mimir-s3-ruler
          key: AWS_ACCESS_KEY_ID
    - name: RULER_AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: mimir-s3-ruler
          key: AWS_SECRET_ACCESS_KEY
    - name: TSDB_BUCKET_HOST
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-tsdb
          key: BUCKET_HOST
    - name: TSDB_BUCKET_NAME
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-tsdb
          key: BUCKET_NAME
    - name: TSDB_AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: mimir-s3-tsdb
          key: AWS_ACCESS_KEY_ID
    - name: TSDB_AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: mimir-s3-tsdb
          key: AWS_SECRET_ACCESS_KEY

compactor:
  replicas: 1
  persistentVolume:
    size: 2Gi
  resources:
    limits:
      cpu: 300m
      memory: 128Mi
    requests:
      cpu: 300m
      memory: 128Mi
  env:
    - name: RULER_BUCKET_HOST
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-ruler
          key: BUCKET_HOST
    - name: RULER_BUCKET_NAME
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-ruler
          key: BUCKET_NAME
    - name: RULER_AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: mimir-s3-ruler
          key: AWS_ACCESS_KEY_ID
    - name: RULER_AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: mimir-s3-ruler
          key: AWS_SECRET_ACCESS_KEY
    - name: TSDB_BUCKET_HOST
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-tsdb
          key: BUCKET_HOST
    - name: TSDB_BUCKET_NAME
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-tsdb
          key: BUCKET_NAME
    - name: TSDB_AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: mimir-s3-tsdb
          key: AWS_ACCESS_KEY_ID
    - name: TSDB_AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: mimir-s3-tsdb
          key: AWS_SECRET_ACCESS_KEY

distributor:
  replicas: 3
  resources:
    limits:
      cpu: 300m
      memory: 128Mi
    requests:
      cpu: 300m
      memory: 128Mi

ingester:
  persistentVolume:
    size: 2Gi
  replicas: 3
  resources:
    limits:
      cpu: 300m
      memory: 128Mi
    requests:
      cpu: 300m
      memory: 128Mi
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: target
                operator: In
                values:
                  - ingester
          topologyKey: 'kubernetes.io/hostname'
  env:
    - name: RULER_BUCKET_HOST
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-ruler
          key: BUCKET_HOST
    - name: RULER_BUCKET_NAME
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-ruler
          key: BUCKET_NAME
    - name: RULER_AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: mimir-s3-ruler
          key: AWS_ACCESS_KEY_ID
    - name: RULER_AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: mimir-s3-ruler
          key: AWS_SECRET_ACCESS_KEY
    - name: TSDB_BUCKET_HOST
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-tsdb
          key: BUCKET_HOST
    - name: TSDB_BUCKET_NAME
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-tsdb
          key: BUCKET_NAME
    - name: TSDB_AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: mimir-s3-tsdb
          key: AWS_ACCESS_KEY_ID
    - name: TSDB_AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: mimir-s3-tsdb
          key: AWS_SECRET_ACCESS_KEY

chunks-cache:
  enabled: true
  replicas: 1
  allocatedMemory: 64

index-cache:
  enabled: true
  replicas: 1
  allocatedMemory: 64

metadata-cache:
  enabled: true
  replicas: 1
  allocatedMemory: 64

results-cache:
  enabled: true
  allocatedMemory: 64
minio:
  enabled: false

overrides_exporter:
  replicas: 1
  resources:
    limits:
      cpu: 300m
      memory: 128Mi
    requests:
      cpu: 300m
      memory: 128Mi

querier:
  replicas: 2
  resources:
    limits:
      cpu: 300m
      memory: 128Mi
    requests:
      cpu: 300m
      memory: 128Mi
  env:
    - name: RULER_BUCKET_HOST
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-ruler
          key: BUCKET_HOST
    - name: RULER_BUCKET_NAME
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-ruler
          key: BUCKET_NAME
    - name: RULER_AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: mimir-s3-ruler
          key: AWS_ACCESS_KEY_ID
    - name: RULER_AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: mimir-s3-ruler
          key: AWS_SECRET_ACCESS_KEY
    - name: TSDB_BUCKET_HOST
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-tsdb
          key: BUCKET_HOST
    - name: TSDB_BUCKET_NAME
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-tsdb
          key: BUCKET_NAME
    - name: TSDB_AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: mimir-s3-tsdb
          key: AWS_ACCESS_KEY_ID
    - name: TSDB_AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: mimir-s3-tsdb
          key: AWS_SECRET_ACCESS_KEY

query_frontend:
  replicas: 1
  resources:
    limits:
      cpu: 300m
      memory: 128Mi
    requests:
      cpu: 300m
      memory: 128Mi

ruler:
  replicas: 2
  resources:
    limits:
      cpu: 300m
      memory: 128Mi
    requests:
      cpu: 300m
      memory: 128Mi
  env:
    - name: RULER_BUCKET_HOST
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-ruler
          key: BUCKET_HOST
    - name: RULER_BUCKET_NAME
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-ruler
          key: BUCKET_NAME
    - name: RULER_AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: mimir-s3-ruler
          key: AWS_ACCESS_KEY_ID
    - name: RULER_AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: mimir-s3-ruler
          key: AWS_SECRET_ACCESS_KEY
    - name: TSDB_BUCKET_HOST
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-tsdb
          key: BUCKET_HOST
    - name: TSDB_BUCKET_NAME
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-tsdb
          key: BUCKET_NAME
    - name: TSDB_AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: mimir-s3-tsdb
          key: AWS_ACCESS_KEY_ID
    - name: TSDB_AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: mimir-s3-tsdb
          key: AWS_SECRET_ACCESS_KEY

store_gateway:
  persistentVolume:
    size: 2Gi
  replicas: 1
  resources:
    requests:
      cpu: 300m
      memory: 128Mi
  env:
    - name: RULER_BUCKET_HOST
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-ruler
          key: BUCKET_HOST
    - name: RULER_BUCKET_NAME
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-ruler
          key: BUCKET_NAME
    - name: RULER_AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: mimir-s3-ruler
          key: AWS_ACCESS_KEY_ID
    - name: RULER_AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: mimir-s3-ruler
          key: AWS_SECRET_ACCESS_KEY
    - name: TSDB_BUCKET_HOST
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-tsdb
          key: BUCKET_HOST
    - name: TSDB_BUCKET_NAME
      valueFrom:
        configMapKeyRef:
          name: mimir-s3-tsdb
          key: BUCKET_NAME
    - name: TSDB_AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: mimir-s3-tsdb
          key: AWS_ACCESS_KEY_ID
    - name: TSDB_AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: mimir-s3-tsdb
          key: AWS_SECRET_ACCESS_KEY

# Grafana Enterprise Metrics feature related
# admin_api:
#   replicas: 3
#   resources:
#     limits:
#       cpu: 200m
#       memory: 256Mi
#     requests:
#       cpu: 10m
#       memory: 64Mi
#   extraEnvFrom:
#     - configMapRef:
#         name: mimir-s3-ent-admin
#     - secretRef:
#         name: mimir-s3-ent-admin

# gateway:
#   replicas: 3
#   resources:
#     limits:
#       cpu: 200m
#       memory: 256Mi
#     requests:
#       cpu: 10m
#       memory: 256Mi

mimir:
  structuredConfig:
    # admin_client:
    #   storage:
    #     type: s3
    #     s3:
    #       access_key_id: '${AWS_ACCESS_KEY_ID}'
    #       bucket_name: '${BUCKET_NAME}'
    #       endpoint: '${BUCKET_HOST}:${BUCKET_PORT}'
    #       insecure: true
    #       secret_access_key: '${AWS_SECRET_ACCESS_KEY}'
    alertmanager_storage:
      backend: s3
      s3:
        endpoint: ${RULER_BUCKET_HOST}
        bucket_name: ${RULER_BUCKET_NAME}
        access_key_id: ${RULER_AWS_ACCESS_KEY_ID}
        secret_access_key: ${RULER_AWS_SECRET_ACCESS_KEY}
        insecure: true
    blocks_storage:
      s3:
        endpoint: ${TSDB_BUCKET_HOST}
        bucket_name: ${TSDB_BUCKET_NAME}
        access_key_id: ${TSDB_AWS_ACCESS_KEY_ID}
        secret_access_key: ${TSDB_AWS_SECRET_ACCESS_KEY}
        insecure: true
    ruler_storage:
      backend: s3
      s3:
        endpoint: ${RULER_BUCKET_HOST}
        bucket_name: ${RULER_BUCKET_NAME}
        access_key_id: ${RULER_AWS_ACCESS_KEY_ID}
        secret_access_key: ${RULER_AWS_SECRET_ACCESS_KEY}
        insecure: true

nginx:
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    hosts:
      - host: mimir.kube.loc
        paths:
          - path: /
            pathType: Prefix
    tls: