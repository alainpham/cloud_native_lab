---
# Source: mimir-distributed/templates/podsecuritypolicy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: gem-mimir
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  namespace: "gem"
spec:
  privileged: false
  allowPrivilegeEscalation: false
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'persistentVolumeClaim'
    - 'secret'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
    - min: 1
      max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
    - min: 1
      max: 65535
  readOnlyRootFilesystem: true
  requiredDropCapabilities:
    - ALL
---
# Source: mimir-distributed/templates/ingester/ingester-pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: gem-mimir-ingester
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: ingester
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  namespace: "gem"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: gem
      app.kubernetes.io/component: ingester
  maxUnavailable: 1
---
# Source: mimir-distributed/templates/store-gateway/store-gateway-pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: gem-mimir-store-gateway
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: store-gateway
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  namespace: "gem"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: gem
      app.kubernetes.io/component: store-gateway
  maxUnavailable: 1
---
# Source: mimir-distributed/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gem-mimir
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
---
# Source: mimir-distributed/templates/license-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: gem-mimir-license
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  namespace: "gem"
data:
  license.jwt: Tk9UQVZBTElETElDRU5TRQ==
---
# Source: mimir-distributed/templates/mimir-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gem-mimir-config
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  namespace: "gem"
data:
  mimir.yaml: |
    
    activity_tracker:
      filepath: /data/metrics-activity.log
    admin_api:
      leader_election:
        enabled: true
        ring:
          kvstore:
            store: memberlist
    alertmanager:
      data_dir: /data
      enable_api: true
      external_url: /alertmanager
    alertmanager_storage:
      backend: s3
      s3:
        access_key_id: admin
        bucket_name: mimir-ruler
        endpoint: minio.minio.svc.cluster.local:9000
        insecure: true
        secret_access_key: password
    auth:
      type: enterprise
    blocks_storage:
      backend: s3
      bucket_store:
        chunks_cache:
          backend: memcached
          memcached:
            addresses: dns+gem-mimir-chunks-cache.gem.svc:11211
            max_item_size: 1048576
            timeout: 450ms
        index_cache:
          backend: memcached
          memcached:
            addresses: dns+gem-mimir-index-cache.gem.svc:11211
            max_item_size: 15728640
        metadata_cache:
          backend: memcached
          memcached:
            addresses: dns+gem-mimir-metadata-cache.gem.svc:11211
            max_item_size: 1048576
        sync_dir: /data/tsdb-sync
      s3:
        access_key_id: admin
        bucket_name: mimir-tsdb
        endpoint: minio.minio.svc.cluster.local:9000
        insecure: true
        secret_access_key: password
      tsdb:
        dir: /data/tsdb
    cluster_name: gem
    compactor:
      data_dir: /data
    frontend:
      align_queries_with_step: true
      cache_results: true
      log_queries_longer_than: 10s
      parallelize_shardable_queries: true
      results_cache:
        backend: memcached
        memcached:
          addresses: dns+gem-mimir-results-cache.gem.svc:11211
          max_item_size: 1048576
      scheduler_address: gem-mimir-query-scheduler-headless.gem.svc:9095
    frontend_worker:
      scheduler_address: gem-mimir-query-scheduler-headless.gem.svc:9095
    gateway:
      proxy:
        admin_api:
          url: http://gem-mimir-admin-api.gem.svc:8080
        alertmanager:
          url: http://gem-mimir-alertmanager.gem.svc:8080
        compactor:
          url: http://gem-mimir-compactor.gem.svc:8080
        default:
          url: http://gem-mimir-admin-api.gem.svc:8080
        distributor:
          url: dns:///gem-mimir-distributor-headless.gem.svc.cluster.local:9095
        ingester:
          url: http://gem-mimir-ingester.gem.svc:8080
        query_frontend:
          url: http://gem-mimir-query-frontend.gem.svc:8080
        ruler:
          url: http://gem-mimir-ruler.gem.svc:8080
        store_gateway:
          url: http://gem-mimir-store-gateway.gem.svc:8080
    ingester:
      ring:
        final_sleep: 0s
        num_tokens: 512
        tokens_file_path: /data/tokens
        unregister_on_shutdown: false
    ingester_client:
      grpc_client_config:
        max_recv_msg_size: 104857600
        max_send_msg_size: 104857600
    instrumentation:
      distributor_client:
        address: dns:///gem-mimir-distributor-headless.gem.svc.cluster.local:9095
      enabled: true
    license:
      path: /license/license.jwt
    limits:
      max_query_parallelism: 224
    memberlist:
      abort_if_cluster_join_fails: false
      compression_enabled: false
      join_members:
      - dns+gem-mimir-gossip-ring.gem.svc.cluster.local:7946
    querier:
      max_concurrent: 16
    query_scheduler:
      max_outstanding_requests_per_tenant: 1600
    ruler:
      alertmanager_url: dnssrvnoa+http://_http-metrics._tcp.gem-mimir-alertmanager-headless.gem.svc.cluster.local/alertmanager
      enable_api: true
      rule_path: /data
    ruler_storage:
      backend: s3
      s3:
        access_key_id: admin
        bucket_name: mimir-ruler
        endpoint: minio.minio.svc.cluster.local:9000
        insecure: true
        secret_access_key: password
    runtime_config:
      file: /var/mimir/runtime.yaml
    server:
      grpc_server_max_concurrent_streams: 1000
      grpc_server_max_connection_age: 2m
      grpc_server_max_connection_age_grace: 5m
      grpc_server_max_connection_idle: 1m
    store_gateway:
      sharding_ring:
        tokens_file_path: /data/tokens
---
# Source: mimir-distributed/templates/runtime-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gem-mimir-runtime
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  namespace: "gem"
data:
  runtime.yaml: |
    
    {}
---
# Source: mimir-distributed/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gem-mimir
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  namespace: "gem"
rules:
- apiGroups:      ['extensions']
  resources:      ['podsecuritypolicies']
  verbs:          ['use']
  resourceNames:  [gem-mimir]
---
# Source: mimir-distributed/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gem-mimir
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  namespace: "gem"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gem-mimir
subjects:
- kind: ServiceAccount
  name: gem-mimir
---
# Source: mimir-distributed/templates/admin-api/admin-api-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-admin-api
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: admin-api
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: admin-api
---
# Source: mimir-distributed/templates/alertmanager/alertmanager-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-alertmanager-headless
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: alertmanager
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
    prometheus.io/service-monitor: "false"
  annotations:
    {}
  namespace: "gem"
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
    - port: 9094
      protocol: TCP
      name: cluster
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: alertmanager
---
# Source: mimir-distributed/templates/alertmanager/alertmanager-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-alertmanager
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: alertmanager
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: alertmanager
---
# Source: mimir-distributed/templates/chunks-cache/chunks-cache-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-chunks-cache
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: chunks-cache
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: memcached-client
      port: 11211
      targetPort: 11211
    
    - name: http-metrics
      port: 9150
      targetPort: 9150
    
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: chunks-cache
---
# Source: mimir-distributed/templates/compactor/compactor-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-compactor
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: compactor
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: compactor
---
# Source: mimir-distributed/templates/distributor/distributor-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-distributor-headless
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: distributor
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
    prometheus.io/service-monitor: "false"
  annotations:
    {}
  namespace: "gem"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: distributor
---
# Source: mimir-distributed/templates/distributor/distributor-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-distributor
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: distributor
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: distributor
---
# Source: mimir-distributed/templates/gateway/gateway-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-gateway
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: gateway
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  type: ClusterIP
  ports:
    - port: 80
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 8080
      protocol: TCP
      name: legacy-http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: gateway
---
# Source: mimir-distributed/templates/gossip-ring/gossip-ring-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-gossip-ring
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: gossip-ring
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  namespace: "gem"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: gossip-ring
      port: 7946
      protocol: TCP
      targetPort: 7946
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/part-of: memberlist
---
# Source: mimir-distributed/templates/index-cache/index-cache-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-index-cache
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: index-cache
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: memcached-client
      port: 11211
      targetPort: 11211
    
    - name: http-metrics
      port: 9150
      targetPort: 9150
    
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: index-cache
---
# Source: mimir-distributed/templates/ingester/ingester-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-ingester-headless
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: ingester
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
    prometheus.io/service-monitor: "false"
  annotations:
    {}
  namespace: "gem"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: ingester
---
# Source: mimir-distributed/templates/ingester/ingester-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-ingester
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: ingester
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: ingester
---
# Source: mimir-distributed/templates/metadata-cache/metadata-cache-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-metadata-cache
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: metadata-cache
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: memcached-client
      port: 11211
      targetPort: 11211
    
    - name: http-metrics
      port: 9150
      targetPort: 9150
    
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: metadata-cache
---
# Source: mimir-distributed/templates/overrides-exporter/overrides-exporter-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-overrides-exporter
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: overrides-exporter
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: overrides-exporter
---
# Source: mimir-distributed/templates/querier/querier-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-querier
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: querier
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: querier
---
# Source: mimir-distributed/templates/query-frontend/query-frontend-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-query-frontend-headless
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: query-frontend
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
    prometheus.io/service-monitor: "false"
  annotations:
    {}
  namespace: "gem"
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: query-frontend
---
# Source: mimir-distributed/templates/query-frontend/query-frontend-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-query-frontend
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: query-frontend
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: query-frontend
---
# Source: mimir-distributed/templates/query-scheduler/query-scheduler-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-query-scheduler-headless
  namespace: "gem"
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: query-scheduler
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
    prometheus.io/service-monitor: "false"
  annotations:
    {}
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: query-scheduler
---
# Source: mimir-distributed/templates/query-scheduler/query-scheduler-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-query-scheduler
  namespace: "gem"
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: query-scheduler
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: query-scheduler
---
# Source: mimir-distributed/templates/results-cache/results-cache-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-results-cache
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: results-cache
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: memcached-client
      port: 11211
      targetPort: 11211
    
    - name: http-metrics
      port: 9150
      targetPort: 9150
    
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: results-cache
---
# Source: mimir-distributed/templates/ruler/ruler-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-ruler
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: ruler
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: ruler
---
# Source: mimir-distributed/templates/store-gateway/store-gateway-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-store-gateway-headless
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: store-gateway
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
    prometheus.io/service-monitor: "false"
  annotations:
    {}
  namespace: "gem"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: store-gateway
---
# Source: mimir-distributed/templates/store-gateway/store-gateway-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gem-mimir-store-gateway
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: store-gateway
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: store-gateway
---
# Source: mimir-distributed/templates/admin-api/admin-api-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    {}
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: admin-api
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  name: gem-mimir-admin-api
  namespace: "gem"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: gem
      app.kubernetes.io/component: admin-api
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-3.1.0
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: gem
        app.kubernetes.io/version: "2.3.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: admin-api
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: e9d6b4e018fcf04335369dfeabe5e1e803564a2cf8a7fee90d2f06d79d48408d
      namespace: "gem"
    spec:
      serviceAccountName: gem-mimir
      securityContext:
        {}
      initContainers:
      containers:
        - name: admin-api
          image: "registry.work.lan/enterprise-metrics:v2.3.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=admin-api"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: runtime-config
              mountPath: /var/mimir
            - name: license
              mountPath: /license
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
          envFrom:
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          configMap:
            name: gem-mimir-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: runtime-config
          configMap:
            name: gem-mimir-runtime
        - name: license
          secret:
            secretName: gem-mimir-license
        - name: storage
          emptyDir: {}
---
# Source: mimir-distributed/templates/distributor/distributor-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gem-mimir-distributor
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: distributor
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: gem
      app.kubernetes.io/component: distributor
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-3.1.0
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: gem
        app.kubernetes.io/version: "2.3.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: distributor
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: e9d6b4e018fcf04335369dfeabe5e1e803564a2cf8a7fee90d2f06d79d48408d
      namespace: "gem"
    spec:
      serviceAccountName: gem-mimir
      securityContext:
        {}
      initContainers:
        []
      containers:
        - name: distributor
          image: "registry.work.lan/enterprise-metrics:v2.3.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=distributor"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: license
              mountPath: /license
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            limits:
              cpu: 300m
              memory: 128Mi
            requests:
              cpu: 300m
              memory: 128Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
          envFrom:
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: target
                operator: In
                values:
                - distributor
            topologyKey: kubernetes.io/hostname
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          configMap:
            name: gem-mimir-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: license
          secret:
            secretName: gem-mimir-license
        - name: runtime-config
          configMap:
            name: gem-mimir-runtime
        - name: storage
          emptyDir: {}
---
# Source: mimir-distributed/templates/gateway/gateway-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    {}
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: gateway
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  name: gem-mimir-gateway
  namespace: "gem"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: gem
      app.kubernetes.io/component: gateway
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-3.1.0
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: gem
        app.kubernetes.io/version: "2.3.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: gateway
      annotations:
        checksum/config: e9d6b4e018fcf04335369dfeabe5e1e803564a2cf8a7fee90d2f06d79d48408d
      namespace: "gem"
    spec:
      serviceAccountName: gem-mimir
      securityContext:
        {}
      initContainers:
        []
      containers:
        - name: gateway
          image: "registry.work.lan/enterprise-metrics:v2.3.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=gateway"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: runtime-config
              mountPath: /var/mimir
            - name: license
              mountPath: /license
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
          envFrom:
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          configMap:
            name: gem-mimir-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: runtime-config
          configMap:
            name: gem-mimir-runtime
        - name: license
          secret:
            secretName: gem-mimir-license
        - name: storage
          emptyDir: {}
---
# Source: mimir-distributed/templates/overrides-exporter/overrides-exporter-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    {}
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: overrides-exporter
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  name: gem-mimir-overrides-exporter
  namespace: "gem"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: gem
      app.kubernetes.io/component: overrides-exporter
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-3.1.0
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: gem
        app.kubernetes.io/version: "2.3.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: overrides-exporter
      annotations:
        checksum/config: e9d6b4e018fcf04335369dfeabe5e1e803564a2cf8a7fee90d2f06d79d48408d
      namespace: "gem"
    spec:
      serviceAccountName: gem-mimir
      securityContext:
        {}
      initContainers:
        []
      containers:
        - name: overrides-exporter
          image: "registry.work.lan/enterprise-metrics:v2.3.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=overrides-exporter"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: license
              mountPath: /license
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            limits:
              cpu: 300m
              memory: 128Mi
            requests:
              cpu: 300m
              memory: 128Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
          envFrom:
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          configMap:
            name: gem-mimir-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: license
          secret:
            secretName: gem-mimir-license
        - name: runtime-config
          configMap:
            name: gem-mimir-runtime
        - name: storage
          emptyDir: {}
---
# Source: mimir-distributed/templates/querier/querier-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gem-mimir-querier
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: querier
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: gem
      app.kubernetes.io/component: querier
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-3.1.0
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: gem
        app.kubernetes.io/version: "2.3.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: querier
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: e9d6b4e018fcf04335369dfeabe5e1e803564a2cf8a7fee90d2f06d79d48408d
    spec:
      serviceAccountName: gem-mimir
      securityContext:
        {}
      initContainers:
        []
      containers:
        - name: querier
          image: "registry.work.lan/enterprise-metrics:v2.3.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=querier"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: license
              mountPath: /license
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            limits:
              cpu: 300m
              memory: 128Mi
            requests:
              cpu: 300m
              memory: 128Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
          envFrom:
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: target
                  operator: In
                  values:
                  - querier
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 180
      volumes:
        - name: config
          configMap:
            name: gem-mimir-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: license
          secret:
            secretName: gem-mimir-license
        - name: runtime-config
          configMap:
            name: gem-mimir-runtime
        - name: storage
          emptyDir: {}
---
# Source: mimir-distributed/templates/query-frontend/query-frontend-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gem-mimir-query-frontend
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: query-frontend
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: gem
      app.kubernetes.io/component: query-frontend
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-3.1.0
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: gem
        app.kubernetes.io/version: "2.3.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: query-frontend
      annotations:
        checksum/config: e9d6b4e018fcf04335369dfeabe5e1e803564a2cf8a7fee90d2f06d79d48408d
      namespace: "gem"
    spec:
      serviceAccountName: gem-mimir
      securityContext:
        {}
      initContainers:
        []
      containers:
        - name: query-frontend
          image: "registry.work.lan/enterprise-metrics:v2.3.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=query-frontend"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: runtime-config
              mountPath: /var/mimir
            - name: license
              mountPath: /license
            - name: config
              mountPath: /etc/mimir
            - name: storage
              mountPath: /data
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            limits:
              cpu: 300m
              memory: 128Mi
            requests:
              cpu: 300m
              memory: 128Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
          envFrom:
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: target
                  operator: In
                  values:
                  - query-frontend
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 180
      volumes:
        - name: config
          configMap:
            name: gem-mimir-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: license
          secret:
            secretName: gem-mimir-license
        - name: runtime-config
          configMap:
            name: gem-mimir-runtime
        - name: storage
          emptyDir: {}
---
# Source: mimir-distributed/templates/query-scheduler/query-scheduler-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gem-mimir-query-scheduler
  namespace: "gem"
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: query-scheduler
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: gem
      app.kubernetes.io/component: query-scheduler
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-3.1.0
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: gem
        app.kubernetes.io/version: "2.3.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: query-scheduler
      annotations:
        checksum/config: e9d6b4e018fcf04335369dfeabe5e1e803564a2cf8a7fee90d2f06d79d48408d
    spec:
      serviceAccountName: gem-mimir
      securityContext:
        {}
      initContainers:
        []
      containers:
        - name: query-scheduler
          image: "registry.work.lan/enterprise-metrics:v2.3.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=query-scheduler"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: runtime-config
              mountPath: /var/mimir
            - name: license
              mountPath: /license
            - name: config
              mountPath: /etc/mimir
            - name: storage
              mountPath: /data
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
          envFrom:
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: target
                  operator: In
                  values:
                  - query-scheduler
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 180
      volumes:
        - name: config
          configMap:
            name: gem-mimir-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: license
          secret:
            secretName: gem-mimir-license
        - name: runtime-config
          configMap:
            name: gem-mimir-runtime
        - name: storage
          emptyDir: {}
---
# Source: mimir-distributed/templates/ruler/ruler-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gem-mimir-ruler
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: ruler
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: gem
      app.kubernetes.io/component: ruler
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-3.1.0
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: gem
        app.kubernetes.io/version: "2.3.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: ruler
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: e9d6b4e018fcf04335369dfeabe5e1e803564a2cf8a7fee90d2f06d79d48408d
      namespace: "gem"
    spec:
      serviceAccountName: gem-mimir
      securityContext:
        {}
      initContainers:
        []
      containers:
        - name: ruler
          image: "registry.work.lan/enterprise-metrics:v2.3.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=ruler"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: license
              mountPath: /license
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            limits:
              cpu: 300m
              memory: 128Mi
            requests:
              cpu: 300m
              memory: 128Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
          envFrom:
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 180
      volumes:
        - name: config
          configMap:
            name: gem-mimir-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: license
          secret:
            secretName: gem-mimir-license
        - name: runtime-config
          configMap:
            name: gem-mimir-runtime
        - name: storage
          emptyDir: {}
---
# Source: mimir-distributed/templates/alertmanager/alertmanager-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gem-mimir-alertmanager
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: alertmanager
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: gem
      app.kubernetes.io/component: alertmanager
  updateStrategy:
    type: RollingUpdate
  serviceName: gem-mimir-alertmanager
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes:
          
          - ReadWriteOnce
        resources:
          requests:
            storage: "1Gi"
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-3.1.0
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: gem
        app.kubernetes.io/version: "2.3.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: alertmanager
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: e9d6b4e018fcf04335369dfeabe5e1e803564a2cf8a7fee90d2f06d79d48408d
      namespace: "gem"
    spec:
      serviceAccountName: gem-mimir
      securityContext:
        {}
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          configMap:
            name: gem-mimir-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: license
          secret:
            secretName: gem-mimir-license
        - name: runtime-config
          configMap:
            name: gem-mimir-runtime
        - name: tmp
          emptyDir: {}
      containers:
        - name: alertmanager
          image: "registry.work.lan/enterprise-metrics:v2.3.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=alertmanager"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: license
              mountPath: /license
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
            - name: tmp
              mountPath: /tmp
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            limits:
              cpu: 300m
              memory: 128Mi
            requests:
              cpu: 300m
              memory: 128Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
          envFrom:
---
# Source: mimir-distributed/templates/chunks-cache/chunks-cache-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gem-mimir-chunks-cache
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: memcached
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: gem
      app.kubernetes.io/component: chunks-cache
  updateStrategy:
    type: RollingUpdate
  serviceName: gem-mimir-chunks-cache

  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-3.1.0
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: gem
        app.kubernetes.io/version: "2.3.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: chunks-cache
      annotations:

    spec:
      serviceAccountName: gem-mimir
      securityContext:
        fsGroup: 11211
        runAsGroup: 11211
        runAsNonRoot: true
        runAsUser: 11211
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      containers:
        - name: memcached
          image: registry.work.lan/memcached:1.6.16-alpine
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: 77Mi
            requests:
              cpu: 500m
              memory: 77Mi
          ports:
            - containerPort: 11211
              name: client
          args:
            - -m 64
            - -o
            - modern
            - -I 1m
            - -c 16384
            - -v
            - -u 11211
          env:
          envFrom:
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
        - name: exporter
          image: registry.work.lan/memcached-exporter:v0.6.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9150
              name: http-metrics
          args:
            - "--memcached.address=localhost:11211"
            - "--web.listen-address=0.0.0.0:9150"
          resources:
            limits: {}
            requests: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
---
# Source: mimir-distributed/templates/compactor/compactor-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gem-mimir-compactor
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: compactor
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: gem
      app.kubernetes.io/component: compactor
  updateStrategy:
    type: RollingUpdate
  serviceName: gem-mimir-compactor
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes:
          
          - ReadWriteOnce
        resources:
          requests:
            storage: "2Gi"
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-3.1.0
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: gem
        app.kubernetes.io/version: "2.3.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: compactor
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: e9d6b4e018fcf04335369dfeabe5e1e803564a2cf8a7fee90d2f06d79d48408d
      namespace: "gem"
    spec:
      serviceAccountName: gem-mimir
      securityContext:
        {}
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: target
                  operator: In
                  values:
                  - compactor
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 240
      volumes:
        - name: config
          configMap:
            name: gem-mimir-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: license
          secret:
            secretName: gem-mimir-license
        - name: runtime-config
          configMap:
            name: gem-mimir-runtime
      containers:
        - name: compactor
          image: "registry.work.lan/enterprise-metrics:v2.3.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=compactor"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: license
              mountPath: /license
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 60
          resources:
            limits:
              cpu: 300m
              memory: 128Mi
            requests:
              cpu: 300m
              memory: 128Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
          envFrom:
---
# Source: mimir-distributed/templates/index-cache/index-cache-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gem-mimir-index-cache
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: memcached
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: gem
      app.kubernetes.io/component: index-cache
  updateStrategy:
    type: RollingUpdate
  serviceName: gem-mimir-index-cache

  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-3.1.0
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: gem
        app.kubernetes.io/version: "2.3.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: index-cache
      annotations:

    spec:
      serviceAccountName: gem-mimir
      securityContext:
        fsGroup: 11211
        runAsGroup: 11211
        runAsNonRoot: true
        runAsUser: 11211
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      containers:
        - name: memcached
          image: registry.work.lan/memcached:1.6.16-alpine
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: 77Mi
            requests:
              cpu: 500m
              memory: 77Mi
          ports:
            - containerPort: 11211
              name: client
          args:
            - -m 64
            - -o
            - modern
            - -I 15m
            - -c 16384
            - -v
            - -u 11211
          env:
          envFrom:
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
        - name: exporter
          image: registry.work.lan/memcached-exporter:v0.6.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9150
              name: http-metrics
          args:
            - "--memcached.address=localhost:11211"
            - "--web.listen-address=0.0.0.0:9150"
          resources:
            limits: {}
            requests: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
---
# Source: mimir-distributed/templates/ingester/ingester-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gem-mimir-ingester
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: ingester
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  podManagementPolicy: Parallel
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: gem
      app.kubernetes.io/component: ingester
  updateStrategy:
    type: RollingUpdate
  serviceName: gem-mimir-ingester-headless
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes:
          
          - ReadWriteOnce
        resources:
          requests:
            storage: "2Gi"
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-3.1.0
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: gem
        app.kubernetes.io/version: "2.3.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: ingester
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: e9d6b4e018fcf04335369dfeabe5e1e803564a2cf8a7fee90d2f06d79d48408d
      namespace: "gem"
    spec:
      serviceAccountName: gem-mimir
      securityContext:
        {}
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: target
                operator: In
                values:
                - ingester
            topologyKey: kubernetes.io/hostname
      tolerations:
        []
      terminationGracePeriodSeconds: 240
      volumes:
        - name: config
          configMap:
            name: gem-mimir-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: license
          secret:
            secretName: gem-mimir-license
        - name: runtime-config
          configMap:
            name: gem-mimir-runtime
      containers:
        - name: ingester
          image: "registry.work.lan/enterprise-metrics:v2.3.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=ingester"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
            - "-ingester.ring.instance-availability-zone=zone-default"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
            - name: license
              mountPath: /license
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 60
          resources:
            limits:
              cpu: 300m
              memory: 128Mi
            requests:
              cpu: 300m
              memory: 128Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
          envFrom:
---
# Source: mimir-distributed/templates/metadata-cache/metadata-cache-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gem-mimir-metadata-cache
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: memcached
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: gem
      app.kubernetes.io/component: metadata-cache
  updateStrategy:
    type: RollingUpdate
  serviceName: gem-mimir-metadata-cache

  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-3.1.0
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: gem
        app.kubernetes.io/version: "2.3.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: metadata-cache
      annotations:

    spec:
      serviceAccountName: gem-mimir
      securityContext:
        fsGroup: 11211
        runAsGroup: 11211
        runAsNonRoot: true
        runAsUser: 11211
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      containers:
        - name: memcached
          image: registry.work.lan/memcached:1.6.16-alpine
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: 77Mi
            requests:
              cpu: 500m
              memory: 77Mi
          ports:
            - containerPort: 11211
              name: client
          args:
            - -m 64
            - -o
            - modern
            - -I 1m
            - -c 16384
            - -v
            - -u 11211
          env:
          envFrom:
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
        - name: exporter
          image: registry.work.lan/memcached-exporter:v0.6.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9150
              name: http-metrics
          args:
            - "--memcached.address=localhost:11211"
            - "--web.listen-address=0.0.0.0:9150"
          resources:
            limits: {}
            requests: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
---
# Source: mimir-distributed/templates/results-cache/results-cache-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gem-mimir-results-cache
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: memcached
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: gem
      app.kubernetes.io/component: results-cache
  updateStrategy:
    type: RollingUpdate
  serviceName: gem-mimir-results-cache

  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-3.1.0
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: gem
        app.kubernetes.io/version: "2.3.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: results-cache
      annotations:

    spec:
      serviceAccountName: gem-mimir
      securityContext:
        fsGroup: 11211
        runAsGroup: 11211
        runAsNonRoot: true
        runAsUser: 11211
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      containers:
        - name: memcached
          image: registry.work.lan/memcached:1.6.16-alpine
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: 77Mi
            requests:
              cpu: 500m
              memory: 77Mi
          ports:
            - containerPort: 11211
              name: client
          args:
            - -m 64
            - -o
            - modern
            - -I 1m
            - -c 16384
            - -v
            - -u 11211
          env:
          envFrom:
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
        - name: exporter
          image: registry.work.lan/memcached-exporter:v0.6.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9150
              name: http-metrics
          args:
            - "--memcached.address=localhost:11211"
            - "--web.listen-address=0.0.0.0:9150"
          resources:
            limits: {}
            requests: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
---
# Source: mimir-distributed/templates/store-gateway/store-gateway-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gem-mimir-store-gateway
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: store-gateway
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "gem"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: gem
      app.kubernetes.io/component: store-gateway
  updateStrategy:
    type: RollingUpdate
  serviceName: gem-mimir-store-gateway-headless
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes:
          
          - ReadWriteOnce
        resources:
          requests:
            storage: "2Gi"
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-3.1.0
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: gem
        app.kubernetes.io/version: "2.3.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: store-gateway
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: e9d6b4e018fcf04335369dfeabe5e1e803564a2cf8a7fee90d2f06d79d48408d
      namespace: "gem"
    spec:
      serviceAccountName: gem-mimir
      securityContext:
        {}
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: target
                operator: In
                values:
                - store-gateway
            topologyKey: kubernetes.io/hostname
      tolerations:
        []
      terminationGracePeriodSeconds: 240
      volumes:
        - name: config
          configMap:
            name: gem-mimir-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: license
          secret:
            secretName: gem-mimir-license
        - name: runtime-config
          configMap:
            name: gem-mimir-runtime
      containers:
        - name: store-gateway
          image: "registry.work.lan/enterprise-metrics:v2.3.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=store-gateway"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: license
              mountPath: /license
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 60
          resources:
            requests:
              cpu: 300m
              memory: 128Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
          envFrom:
---
# Source: mimir-distributed/templates/minio/create-bucket-job.yaml
# Minio provides post-install hook to create bucket
# however the hook won't be executed if helm install is run
# with --wait flag. Hence this job is a workaround for that.
# See https://github.com/grafana/mimir/issues/2464
---
# Source: mimir-distributed/templates/tokengen/tokengen-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: gem-mimir-tokengen
  labels:
    helm.sh/chart: mimir-distributed-3.1.0
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: gem
    app.kubernetes.io/component: tokengen
    app.kubernetes.io/version: "2.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": post-install
  namespace: "gem"
spec:
  backoffLimit: 6
  completions: 1
  parallelism: 1
  selector:
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-3.1.0
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: gem
        app.kubernetes.io/version: "2.3.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: tokengen
      namespace: "gem"
    spec:
      serviceAccountName: gem-mimir
      securityContext:
        null
      initContainers:
        []
      containers:
        - name: tokengen
          image: "registry.work.lan/enterprise-metrics:v2.3.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=tokengen"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: license
              mountPath: /license
          env:
          envFrom:
          securityContext:
            readOnlyRootFilesystem: true
      restartPolicy: OnFailure
      volumes:
        - name: config
          configMap:
            name: gem-mimir-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: license
          secret:
            secretName: gem-mimir-license
        - name: storage
          emptyDir: {}
