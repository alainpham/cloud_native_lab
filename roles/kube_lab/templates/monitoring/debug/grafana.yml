apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      name: grafana
  template:
    metadata:
      labels:
        name: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:9.4.7
          imagePullPolicy: IfNotPresent
          ports:
            - name: grafana
              containerPort: 3000
              protocol: TCP
            - name: grafana-alert
              containerPort: 9094
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: password
            - name: GF_PATHS_DATA
              value: /var/lib/grafana
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
          volumeMounts:
            - name: grafana-data
              mountPath: /var/lib/grafana
            - name: grafana-logs
              mountPath: /var/log/grafana
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
            # - name: grafana-dashboards
            #   mountPath: /etc/grafana/provisioning/dashboards
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 10
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
      volumes:
        - name: grafana-data
          emptyDir: {}
        - name: grafana-logs
          emptyDir: {}
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
        # - name: grafana-dashboards
        #   configMap:
        #     name: grafana-dashboards

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
spec:
  ports:
    - name: grafana
      port: 3000
      targetPort: 3000
      protocol: TCP
  selector:
    name: grafana
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
data:
  grafana-datasources.yml: |
    # config file version
    apiVersion: 1
    datasources:
      - name: Prometheus-src
        uid: grafanacloud-prom-src
        type: prometheus
        access: proxy
        orgId: 1
        url: http://prometheus:9090
        version: 1
        isDefault: false
        editable: false

      - name: Prometheus
        uid: grafanacloud-prom
        type: prometheus
        access: proxy
        orgId: 1
        url: http://mimir-headless:8080/prometheus
        version: 1
        isDefault: true
        editable: false
        jsonData:
          exemplarTraceIdDestinations:
            - datasourceUid: grafanacloud-traces
              name: traceId
          httpMethod: POST

      - name: Loki
        uid: grafanacloud-logs
        type: loki
        access: proxy
        url: http://loki-headless:3100
        jsonData:
          derivedFields:
            - datasourceUid: grafanacloud-traces
              matcherRegex: "traceID=(\\w+)"
              name: traceId
              url: '$${__value.raw}'
---