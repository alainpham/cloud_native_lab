---
- set_fact:
    appname: grafana-enterprise

- name: provision infra
  ansible.builtin.include_role:
    name: docker_lab
    tasks_from: infra-provision

- name: "Read a mimir dev tenant admin token content"
  shell: |
    cat /home/{{ansible_user}}/apps/mimir/data/dev_admin.token
  register: mdev_admin_token
  when: appconfig[appname].appstate == 'started'

- name: "Read a loki dev tenant admin token content"
  shell: |
    cat /home/{{ansible_user}}/apps/loki/data/dev_admin.token
  register: ldev_admin_token
  when: appconfig[appname].appstate == 'started'

- name: "Read a tempo dev tenant admin token content"
  shell: |
    cat /home/{{ansible_user}}/apps/tempo/data/dev_admin.token
  register: tdev_admin_token
  when: appconfig[appname].appstate == 'started'

- name: Template {{appname}} config
  when:  appconfig[appname].appstate == 'started'
  become: true
  ansible.builtin.template:
    src: templates/{{appname}}/config/grafana-datasources-template.j2
    dest: /home/{{ ansible_user }}/apps/{{appname}}/config/grafana-datasources.yml
    owner: "{{ appconfig[appname].exec_as_user }}"
    group: "{{ appconfig[appname].exec_as_group }}"
    mode: '0644'

- name: configure license
  when:  appconfig[appname].appstate == 'started'
  copy:
    dest: "/home/{{ansible_user}}/apps/{{ appname }}/config/license.jwt"
    content: |
      {{ secretappconfig[appname].license }}
    owner: "{{ appconfig[appname].exec_as_user }}"
    group: "{{ appconfig[appname].exec_as_group }}"
    mode: '0644'

# gem app
- stat:
    path: "/home/{{ansible_user}}/apps/{{ appname }}/config/plugins/gem-app.zip"
  register: apppackage

- stat:
    path: "/home/{{ansible_user}}/apps/{{ appname }}/config/plugins/gem-app"
  register: pluginsfolder

- name: Download plugin
  ansible.builtin.get_url:
    url: "{{ appconfig[appname].gem_app_url }}"
    dest: /home/{{ansible_user}}/apps/{{ appname }}/config/plugins/gem-app.zip
    mode: '0644'
    owner: "{{ appconfig[appname].exec_as_user }}"
    group: "{{ appconfig[appname].exec_as_group }}"
    validate_certs: false
  when: not apppackage.stat.exists and appconfig[appname].appstate == 'started'


- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: "/home/{{ansible_user}}/apps/{{ appname }}/config/plugins/gem-app"
    state: directory
    mode: '0755'
    owner: "{{ appconfig[appname].exec_as_user }}"
    group: "{{ appconfig[appname].exec_as_group }}"
  when: not pluginsfolder.stat.exists  and appconfig[appname].appstate == 'started'

- name: unarchive plugin
  ansible.builtin.unarchive:
    src:  "/home/{{ansible_user}}/apps/{{ appname }}/config/plugins/gem-app.zip"
    dest: "/home/{{ansible_user}}/apps/{{ appname }}/config/plugins/gem-app"
    remote_src: yes
  when: not pluginsfolder.stat.exists and appconfig[appname].appstate == 'started'

- name: "Read a admin token content"
  shell: |
    cat /home/{{ansible_user}}/apps/mimir/data/admin-token.txt
  register: gemadmtoken
  when: appconfig[appname].appstate == 'started'



# gel app
- stat:
    path: "/home/{{ansible_user}}/apps/{{ appname }}/config/plugins/gel-app.zip"
  register: apppackage

- stat:
    path: "/home/{{ansible_user}}/apps/{{ appname }}/config/plugins/gel-app"
  register: pluginsfolder

- name: Download plugin
  ansible.builtin.get_url:
    url: "{{ appconfig[appname].gel_app_url }}"
    dest: /home/{{ansible_user}}/apps/{{ appname }}/config/plugins/gel-app.zip
    mode: '0644'
    owner: "{{ appconfig[appname].exec_as_user }}"
    group: "{{ appconfig[appname].exec_as_group }}"
    validate_certs: false
  when: not apppackage.stat.exists and appconfig[appname].appstate == 'started'


- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: "/home/{{ansible_user}}/apps/{{ appname }}/config/plugins/gel-app"
    state: directory
    mode: '0755'
    owner: "{{ appconfig[appname].exec_as_user }}"
    group: "{{ appconfig[appname].exec_as_group }}"
  when: not pluginsfolder.stat.exists  and appconfig[appname].appstate == 'started'

- name: unarchive plugin
  ansible.builtin.unarchive:
    src:  "/home/{{ansible_user}}/apps/{{ appname }}/config/plugins/gel-app.zip"
    dest: "/home/{{ansible_user}}/apps/{{ appname }}/config/plugins/gel-app"
    remote_src: yes
  when: not pluginsfolder.stat.exists and appconfig[appname].appstate == 'started'

- name: "Read a admin token content"
  shell: |
    cat /home/{{ansible_user}}/apps/loki/data/admin-token.txt
  register: geladmtoken
  when: appconfig[appname].appstate == 'started'

# get app
- stat:
    path: "/home/{{ansible_user}}/apps/{{ appname }}/config/plugins/get-app.zip"
  register: apppackage

- stat:
    path: "/home/{{ansible_user}}/apps/{{ appname }}/config/plugins/get-app"
  register: pluginsfolder

- name: Download plugin
  ansible.builtin.get_url:
    url: "{{ appconfig[appname].get_app_url }}"
    dest: /home/{{ansible_user}}/apps/{{ appname }}/config/plugins/get-app.zip
    mode: '0644'
    owner: "{{ appconfig[appname].exec_as_user }}"
    group: "{{ appconfig[appname].exec_as_group }}"
    validate_certs: false
  when: not apppackage.stat.exists and appconfig[appname].appstate == 'started'


- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: "/home/{{ansible_user}}/apps/{{ appname }}/config/plugins/get-app"
    state: directory
    mode: '0755'
    owner: "{{ appconfig[appname].exec_as_user }}"
    group: "{{ appconfig[appname].exec_as_group }}"
  when: not pluginsfolder.stat.exists  and appconfig[appname].appstate == 'started'

- name: unarchive plugin
  ansible.builtin.unarchive:
    src:  "/home/{{ansible_user}}/apps/{{ appname }}/config/plugins/get-app.zip"
    dest: "/home/{{ansible_user}}/apps/{{ appname }}/config/plugins/get-app"
    remote_src: yes
  when: not pluginsfolder.stat.exists and appconfig[appname].appstate == 'started'

- name: "Read a admin token content"
  shell: |
    cat /home/{{ansible_user}}/apps/tempo/data/admin-token.txt
  register: getadmtoken
  when: appconfig[appname].appstate == 'started'

# provision datasources
- name: Create provisioning
  ansible.builtin.file:
    path: "/home/{{ansible_user}}/apps/{{ appname }}/config/plugin-provisioning"
    state: directory
    mode: '0755'
    owner: "{{ appconfig[appname].exec_as_user }}"
    group: "{{ appconfig[appname].exec_as_group }}"
  when: appconfig[appname].appstate == 'started'

- name: configure gex apps
  when: appconfig[appname].appstate == 'started'
  copy:
    dest: "/home/{{ansible_user}}/apps/{{ appname }}/config/plugin-provisioning/provisioned-grafana-apps.yml"
    content: |
      apiVersion: 1
      apps:
        - type: grafana-metrics-enterprise-app
          org_id: 1
          jsonData:
            backendUrl: http://mimir:8080
            base64EncodedAccessTokenSet: true
            adminApiVersion: v3
            # versionedInitStatus: 
            #   4.0.6--2023-09-22:
            #     reimportedDashboards;
            #       - dashboards/mimir-compactor.json
            #       - dashboards/mimir-reads.json
            #       - dashboards/mimir-writes.json
            #       - dashboards/mimir-compactor-resources.json
            #       - dashboards/mimir-reads-resources.json
            #       - dashboards/mimir-writes-resources.json
            #       - dashboards/mimir-alertmanager.json
            #       - dashboards/mimir-alertmanager-resources.json
            #       - dashboards/mimir-config.json
            #       - dashboards/mimir-object-store.json
            #       - dashboards/mimir-overrides.json
            #       - dashboards/mimir-queries.json
            #       - dashboards/mimir-ruler.json
          secureJsonData:
            base64EncodedAccessToken: "{{ (':' + gemadmtoken.stdout) | b64encode }}"
        - type: grafana-enterprise-logs-app
          org_id: 1
          jsonData:
            backendUrl: http://loki:3100
            base64EncodedAccessTokenSet: true
            adminApiVersion: v3
          secureJsonData:
            base64EncodedAccessToken: "{{ (':' + geladmtoken.stdout) | b64encode }}"
        - type: grafana-enterprise-traces-app
          org_id: 1
          jsonData:
            backendUrl: http://tempo:3100
            base64EncodedAccessTokenSet: true
            adminApiVersion: v3
          secureJsonData:
            base64EncodedAccessToken: "{{ (':' + getadmtoken.stdout) | b64encode }}"
    mode: '0644'
    owner: "{{ appconfig[appname].exec_as_user }}"
    group: "{{ appconfig[appname].exec_as_group }}"



- name: "Manage {{appname}} container state - {{appstate}} - {{appconfig[appname].ip}}"
  docker_container:
    name: "{{appname}}"
    hostname: "{{appname}}"
    image: "{{appconfig[appname].image}}"
    state: "{{ appconfig[appname].appstate }}"
    recreate: "{{ appconfig[appname].recreate }}"
    restart_policy: unless-stopped
    container_default_behavior: no_defaults
    detach: true
    user: "{{ appconfig[appname].exec_as_user }}:{{ appconfig[appname].exec_as_group }}"
    ports: "{{ appconfig[appname].ports | default(omit,true)}}"

    command: 
    env:
      GF_SERVER_DOMAIN: "{{ appname }}.{{ inventory_hostname }}"
      GF_SERVER_ROOT_URL: https://{{ appname }}.{{ inventory_hostname }}/
      GF_ENTERPRISE_LICENSE_PATH: "/license/license.jwt"
      GF_AUTH_BASIC_ENABLED: "true"
      GF_AUTH_DISABLE_LOGIN_FORM: "false"
      GF_AUTH_OAUTH_AUTO_LOGIN: "false"
      GF_AUTH_GENERIC_OAUTH_ENABLED: "true"
      GF_AUTH_GENERIC_OAUTH_NAME: "Keycloak OIDC / OAuth 2.0"
      GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP: "true"
      GF_AUTH_GENERIC_OAUTH_CLIENT_ID: "{{ appname }}.{{ inventory_hostname }}"
      GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: "e2dt6BF1roELLGmksmArt9aIgm7jB6lB"
      GF_AUTH_GENERIC_OAUTH_SCOPES: profile
      GF_AUTH_GENERIC_OAUTH_AUTH_URL: "https://keycloak.{{ inventory_hostname }}/realms/apps/protocol/openid-connect/auth"
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL: "https://keycloak.{{ inventory_hostname }}/realms/apps/protocol/openid-connect/token"
      GF_AUTH_GENERIC_OAUTH_ID_TOKEN_ATTRIBUTE_NAME: "access_token"
      GF_AUTH_GENERIC_OAUTH_LOGIN_ATTRIBUTE_PATH: "preferred_username"
      GF_AUTH_GENERIC_OAUTH_API_URL: "https://keycloak.{{ inventory_hostname }}/realms/apps/protocol/openid-connect/userinfo"
      GF_AUTH_SIGNOUT_REDIRECT_URL: "https://keycloak.{{ inventory_hostname }}/realms/apps/protocol/openid-connect/logout"
      GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH: "contains(realm_access.roles[*], 'o11y-admin') && 'Admin' || contains(realm_access.roles[*], 'o11y-editor') && 'Editor' || contains(realm_access.roles[*], 'o11y-viewer') && 'Viewer'"
      GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_STRICT: "true"
      GF_AUTH_GENERIC_OAUTH_GROUPS_ATTRIBUTE_PATH: "groups[*]"
      GF_PATHS_DATA: "/data"
      GF_PATHS_LOGS: "/data/logs"
      GF_PATHS_PLUGINS: "/plugins"
      GF_USERS_EDITORS_CAN_ADMIN: "false"
      GF_WHITE_LABELING_LOGIN_BACKGROUND: "url(public/branding/background.jpg)"
      GF_WHITE_LABELING_LOGIN_LOGO: "public/branding/logo.svg"
      GF_WHITE_LABELING_MENU_LOGO: "public/branding/logo.svg"
      # GF_FEATURE_TOGGLES_ENABLE: "publicDashboards ngalert accesscontrol panelTitleSearch tempoSearch tempoApmTable traceToMetrics recordedQueries"
      # GF_INSTALL_PLUGINS: "grafana-k6-app,grafana-polystat-panel"
    labels: |
      {
        "traefik.http.services.{{appname}}.loadbalancer.server.port": "3000",
        "traefik.http.routers.{{appname}}.service": "{{appname}}",
        "traefik.http.routers.{{appname}}.entrypoints": "https",
        "traefik.http.routers.{{appname}}.tls": "true",
        "traefik.http.routers.{{appname}}.rule": "Host(`{{appname}}.{{inventory_hostname}}`)",
      }
    volumes:
      - /home/{{ansible_user}}/apps/{{ appname }}/config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/grafana-datasources.yml:ro
      - /home/{{ansible_user}}/apps/{{ appname }}/config/dashboards:/etc/grafana/provisioning/dashboards:ro
      - /home/{{ansible_user}}/apps/{{ appname }}/config/plugin-provisioning/:/etc/grafana/provisioning/plugins:ro
      - /home/{{ansible_user}}/apps/{{ appname }}/config/plugins:/plugins:rw
      - /home/{{ansible_user}}/apps/{{ appname }}/config/graphics:/usr/share/grafana/public/graphics:ro
      # - /home/{{ansible_user}}/apps/tls/{{inventory_hostname}}-root-ca.pem:/etc/ssl/certs/ca-certificates.crt:ro
      # - /home/{{ansible_user}}/apps/{{ appname }}/config/rbac/rbac.yml:/etc/grafana/provisioning/access-control/rbac.yml:ro
      - /home/{{ansible_user}}/apps/{{ appname }}/config/branding:/usr/share/grafana/public/branding:ro
      - /home/{{ansible_user}}/apps/{{ appname }}/config/license.jwt:/license/license.jwt:ro
      - /home/{{ansible_user}}/apps/{{ appname }}/data/:/data:rw
    networks_cli_compatible: yes
    network_mode: primenet
    networks:
      - name: primenet
        ipv4_address: "{{appconfig[appname].ip}}"

- name: Check if server is up
  when:  appconfig[appname].appstate == 'started'
  uri:
    url: "https://{{appname}}.{{inventory_hostname}}/api/health"
    method: GET
    status_code: 200
  register: result
  until: result.status == 200
  retries: 60
  delay: 2

- name: Reset password
  when:  appconfig[appname].appstate == 'started'
  ignore_errors: true
  uri:
    url: "https://{{appname}}.{{inventory_hostname}}/api/user/password"
    user: "admin"
    password: "admin"
    method: PUT
    body: |
      {
        "oldPassword": "admin",
        "newPassword": "password"
      }
    force_basic_auth: yes
    status_code: 200
    headers:
      Content-Type: application/json
      accept: application/json

- name: Create team
  when:  appconfig[appname].appstate == 'started'
  ignore_errors: true
  uri:
    url: "https://{{appname}}.{{inventory_hostname}}/api/teams"
    user: "admin"
    password: "password"
    method: POST
    body_format: json
    body: | 
      {
        "name": "{{ item.name }}",
        "email": "{{ item.name }}@lab.local",
        "orgId": 1
      }
    force_basic_auth: yes
    status_code: 200
  loop:
    - id: 1
      name: teamadmin
    - id: 2
      name: sre
    - id: 3
      name: frontend
    - id: 4
      name: backend

- name: Create folder
  when:  appconfig[appname].appstate == 'started'
  ignore_errors: true
  uri:
    url: "https://{{appname}}.{{inventory_hostname}}/api/folders"
    user: "admin"
    password: "password"
    method: POST
    body_format: json
    body: | 
      {
        "uid": "{{ item.name }}",
        "title": "{{ item.name }}"
      }
    force_basic_auth: yes
    status_code: 200
  loop:
    - id: 1
      name: teamadmin
    - id: 2
      name: sre
    - id: 3
      name: frontend
    - id: 4
      name: backend

- name: Create folder permissions
  when:  appconfig[appname].appstate == 'started'
  ignore_errors: true
  uri:
    url: "https://{{appname}}.{{inventory_hostname}}/api/folders/{{ item.name }}/permissions"
    user: "admin"
    password: "password"
    method: POST
    body_format: json
    body: | 
      {
        "items": [
          {
            "teamId": {{ item.id }},
            "permission": 1
          },
          {
            "teamId": 4,
            "permission": 1
          }
        ]
      }
    force_basic_auth: yes
    status_code: 200
  loop:
    - id: 1
      name: teamadmin
    - id: 2
      name: sre
    - id: 3
      name: frontend
    - id: 4
      name: backend


- name: Create team sync
  when:  appconfig[appname].appstate == 'started'
  ignore_errors: true
  uri:
    url: "https://{{appname}}.{{inventory_hostname}}/api/teams/{{ item.id }}/groups"
    user: "admin"
    password: "password"
    method: POST
    body_format: json
    body: |
      {
        "groupId": "/{{ item.name }}"
      }
    force_basic_auth: yes
    status_code: 200
  loop:
    - id: 1
      name: teamadmin
    - id: 2
      name: sre
    - id: 3
      name: frontend
    - id: 4
      name: backend


- name: Create custom role
  when:  appconfig[appname].appstate == 'started'
  ignore_errors: true
  uri:
    url: "https://{{appname}}.{{inventory_hostname}}/api/access-control/roles"
    user: "admin"
    password: "password"
    method: POST
    body_format: json
    body: 
      name: 'Team Admin'
      uid: 'teamadmin'
      description: 'Create data sources for the team'
      global: false
      permissions:
        - action: 'datasources:create'
        - action: 'datasources:write'
        - action: 'datasources.permissions:read'
          scope: 'datasources:uid:*'
        - action: 'datasources.permissions:write'
          scope: 'datasources:uid:*'
    force_basic_auth: yes
    status_code: 200, 201

- name: Assign custom role to teamadmin team
  when:  appconfig[appname].appstate == 'started'
  ignore_errors: true
  uri:
    url: "https://{{appname}}.{{inventory_hostname}}/api/access-control/teams/{{ item.id }}/roles"
    user: "admin"
    password: "password"
    method: POST
    body_format: json
    body: | 
      {
          "roleUid": "teamadmin"
      }
    force_basic_auth: yes
    status_code: 200
  loop:
    - id: 1
      name: teamadmin


- name: delete infra
  ansible.builtin.include_role:
    name: docker_lab
    tasks_from: infra-delete